<?xml version="1.0" encoding="UTF-8"?>
<sequence-diagram version="1.2.3" icons="true" generate-combined-fragments="true">  
  <object id="1" language="java" name="java.util.concurrent.locks.AbstractQueuedSynchronizer" project="rdltest2" 
    file="C:/Java/jdk1.8.0_111/jre/lib/rt.jar" binary="true" label="abstractQueuedSynchronizer" type="class" 
    autoSize="true">    
    <position height="-1" width="-1" x="715" y="0"/>    
    <execution id="2">      
      <position height="768" width="277" x="5" y="100"/>    
    </execution>    
    <execution id="4">      
      <position height="296" width="277" x="5" y="154"/>    
    </execution>    
    <execution id="8">      
      <position height="27" width="7" x="143" y="208"/>    
    </execution>    
    <execution id="10">      
      <position height="153" width="7" x="140" y="270"/>    
    </execution>    
    <execution id="6">      
      <position height="377" width="277" x="5" y="464"/>    
    </execution>    
    <execution id="16">      
      <position height="27" width="7" x="143" y="536"/>    
    </execution>    
    <execution id="18">      
      <position height="27" width="7" x="140" y="627"/>    
    </execution>    
    <execution id="20">      
      <position height="27" width="7" x="140" y="719"/>    
    </execution>    
    <execution id="22">      
      <position height="27" width="7" x="140" y="787"/>    
    </execution>    
    <execution id="12">      
      <position height="27" width="7" x="143" y="324"/>    
    </execution>    
    <execution id="14">      
      <position height="27" width="7" x="146" y="369"/>    
    </execution>  
  </object>  
  <message id="3" 
    operation="addWaiter(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node):java.util.concurrent.locks.AbstractQueuedSynchronizer.Node" 
    asynchronous="false">    
    <end type="SOURCE" refId="2"/>    
    <end type="TARGET" refId="4"/>  
  </message>  
  <message id="5" operation="acquireQueued(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node,int):boolean" 
    asynchronous="false">    
    <end type="SOURCE" refId="2"/>    
    <end type="TARGET" refId="6"/>  
  </message>  
  <message id="7" 
    operation="compareAndSetTail(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node,java.util.concurrent.locks.AbstractQueuedSynchronizer.Node):boolean" 
    asynchronous="false">    
    <end type="SOURCE" refId="4"/>    
    <end type="TARGET" refId="8"/>  
  </message>  
  <message id="9" 
    operation="enq(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node):java.util.concurrent.locks.AbstractQueuedSynchronizer.Node" 
    asynchronous="false">    
    <end type="SOURCE" refId="4"/>    
    <end type="TARGET" refId="10"/>  
  </message>  
  <message id="11" operation="compareAndSetHead(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node):boolean" 
    asynchronous="false">    
    <end type="SOURCE" refId="10"/>    
    <end type="TARGET" refId="12"/>  
  </message>  
  <message id="13" 
    operation="compareAndSetTail(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node,java.util.concurrent.locks.AbstractQueuedSynchronizer.Node):boolean" 
    asynchronous="false">    
    <end type="SOURCE" refId="10"/>    
    <end type="TARGET" refId="14"/>  
  </message>  
  <message id="15" operation="tryAcquire(int):boolean" asynchronous="false">    
    <end type="SOURCE" refId="6"/>    
    <end type="TARGET" refId="16"/>  
  </message>  
  <message id="17" 
    operation="shouldParkAfterFailedAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node,java.util.concurrent.locks.AbstractQueuedSynchronizer.Node):boolean" 
    asynchronous="false">    
    <end type="SOURCE" refId="6"/>    
    <end type="TARGET" refId="18"/>  
  </message>  
  <message id="19" operation="parkAndCheckInterrupt():boolean" asynchronous="false">    
    <end type="SOURCE" refId="6"/>    
    <end type="TARGET" refId="20"/>  
  </message>  
  <message id="21" operation="cancelAcquire(java.util.concurrent.locks.AbstractQueuedSynchronizer.Node):void" 
    asynchronous="false">    
    <end type="SOURCE" refId="6"/>    
    <end type="TARGET" refId="22"/>  
  </message>
</sequence-diagram>